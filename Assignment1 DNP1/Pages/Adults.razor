@page "/Adults"
@using Assignment1_DNP1.Data
@using System.Collections
@using Assignment1_DNP1.Models
@using global::Models
@inject IAdultdata _adultdata
@inject NavigationManager NavMgr

<h3>Adults</h3>
<p>
    Filter by adult Id: <input type ="number" @oninput="@((arg) => FilterByAdultId(arg))"/>
</p>
<p>
    Filter by adult first name: <input type ="text" @oninput="@((arg) => FilterByFirstname(arg))"/>

</p>
@if (adultsToshow == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!adultsToshow.Any())
{
    <p>
        <em>No Adult items exist. Please add some.</em>
    </p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>User ID</th>
                <th>FirstName</th>
                <th>LastName</th>
                <th>Age</th>
                <th>Hair Color</th>
                <th>Height</th>
                <th>Weight</th>
                <th>JobTitle</th>
                <th>Remove</th>
                <th>Edit</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in adultsToshow)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.FirstName</td>
                    <td>@item.LastName</td>
                    <td>@item.Age</td>
                    <td>@item.HairColor</td>
                    <td>@item.Height</td>
                    <td>@item.Weight</td>
                    <td>@item.JobTitle</td>
                    <td>
                        <button @onclick="@(() => RemoveAdult(item.Id))">
                            <i class="oi oi-trash" style="color:red" />
                        </button>
                    </td>
                    <td>
                        <button @onclick="@(() => Edit(item.Id))">
                            <i class="oi oi-pencil" style="color:#1b6ec2" />
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IList<Adult> adultsToshow;
    private IList<Adult> allAdults;

    private int? filterbyId;

    private string? filterbyfirstName;

    private void FilterByAdultId(ChangeEventArgs changeEventArgs)
    {
        filterbyId = null;
        try
        {
            filterbyId = int.Parse(changeEventArgs.Value.ToString());


        }
        catch (Exception e)
        {
        }
        if(!(filterbyId == null || filterbyId == 0))
        {
            ExecuteFilter();
        } else
        {
            adultsToshow = allAdults;
        }
    }

    private void FilterByFirstname(ChangeEventArgs changeEventArgs)
    {
        filterbyfirstName = null;
        try
        {
            filterbyfirstName = changeEventArgs.Value.ToString();
        }
        catch (Exception e)
        {

        }
        if (!string.IsNullOrEmpty(filterbyfirstName))
        {
            ExecuteFilter();
        }
        else
        {
            filterbyfirstName = null;
            adultsToshow = allAdults;
        }

    }

    private void ExecuteFilter()
    {
        adultsToshow = allAdults.Where(t => (filterbyId != null && t.Id == filterbyId || filterbyId == null)

        && (filterbyfirstName != null && t.FirstName.Equals(filterbyfirstName, StringComparison.OrdinalIgnoreCase) || filterbyfirstName == null)).ToList();

    }

    protected override async Task OnInitializedAsync()
    {

        allAdults = await _adultdata.GetAdultsAsync();
        adultsToshow = allAdults;
    }

    private void RemoveAdult(int adultId)
    {
        Adult adultToRemove = adultsToshow.First(t => t.Id == adultId);
        _adultdata.RemoveAdult(adultId);
        allAdults.Remove(adultToRemove);
        adultsToshow.Remove(adultToRemove);
    }




    private void Edit(int id)
    {
        NavMgr.NavigateTo($"Edit/{id}");
    }


}